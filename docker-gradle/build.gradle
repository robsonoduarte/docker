apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'docker'



sourceSets.main.scala.srcDir "src/main/java"
sourceSets.test.scala.srcDir "src/test/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []


buildscript {
    repositories { mavenLocal(); jcenter() }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}


repositories {
    jcenter()
}

dependencies {
	compile 'org.scala-lang:scala-library:2.11.8'
	testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes 'Main-Class': 'br.com.mystudies.docker.gradle.Echo'
    }
     from {
    	configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  	}
}



// DOCKER

docker {
   baseImage 'java:8-jre-alpine'
}


task dockerImage(type: Docker, dependsOn: ['jar', 'startFile']) {
	runCommand 'apk add --update bash && rm -rf /var/cache/apk/*'
	addFile jar.archivePath, '/' + jar.archiveName
	addFile 'build/start.sh', '/start.sh'
	runCommand 'chmod +x /start.sh'
	defaultCommand = ['/start.sh' ]
}





/*

*/
Map<String, String> hostnames = [lo: 'localhost', de: '192.168.99.100']

import org.apache.tools.ant.filters.*

task startFile(type: Copy){
   from 'src/main/resources'
   into buildDir
   include '**/*.sh'
   filter(ReplaceTokens, tokens:[
	   		archiveName: jar.archiveName,
	   		environment: System.properties['environment'],
	   		hostname: hostnames[System.properties['environment']]
   		]
   	)
}

